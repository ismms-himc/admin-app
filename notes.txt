Admin-on-REST Tutorial
----------------------
  link: https://marmelab.com/admin-on-rest//Tutorial.html

  This 15 minute tutorial will expose how to create a new admin app based on an existing REST API.

Installation: Facebook's create-react-app
------------------------------------------

  Admin-on-REST uses React. We'll use Facebook's create-react-app to create an empty React app, and install the admin-on-rest package:

    >> npm install -g create-react-app
    >> create-react-app test-admin
    >> cd test-admin/
    >> yarn add admin-on-rest
    >> start

  yarn
  ***********
    Yarn is a package manager for your code. It allows you to use and share code with developers ...

  running
  --------
    Success! Created test-admin at /Users/nickfernandez/Documents/admin-on-rest-example/test-admin
    Inside that directory, you can run several commands:

      npm start
        Starts the development server.

      npm run build
        Bundles the app into static files for production.

      npm test
        Starts the test runner.

      npm run eject
        Removes this tool and copies build dependencies, configuration files
        and scripts into the app directory. If you do this, you canâ€™t go back!

    We suggest that you begin by typing:

      cd test-admin
      npm start

    Happy hacking!


  You should be up and running with an empty React application on port 3000.

Making Contact with the API
---------------------------
  We'll be using JSONPlaceholder, a fake REST API designed for testing and prototyping, as the datasource for the admin

    >> curl http://jsonplaceholder.typicode.com/posts/12

    {
      "id": 12,
      ...
    }

  JSONPlaceholder provides endpoints for posts, comments, and users. The admin we'll build will allow us to Create, Retrieve, Update, and Delete (CRUD) these resources.

  Replace the src/App.js by the following code:

    // in src/App.js
    import React from 'react';
    import { jsonServerRestClient, Admin, Resource } from 'admin-on-rest';

    import { PostList } from './posts';

    const App = () => (
      <Admin restClient={jsonSErverRestClient('http://jsonplaceolder.typicode.com')}>
        <Resource name='posts' lists={PostList}
      </Admin>
    );

    export default App;

  The App component now renders an <Admin> component, which is the main compoent of admin-on-rest. This component expects a REST client as a parameter - a function capable of translting REST commands into HTTP requests. Since REST isn't a standard, you will probably have to provide a custom client to connect to your own APIs. But we'll dive into REST clients later. Fow now, let's take advantage of the jsonServerRestClient, which speaks the same REST dialect as JSONPlaceholder.

  <Admin> Component
  *****************
  The <Admin> component is the main React component of admin-on-rest, which I think means is the main component that we will be using from admin-on-rest. We import the Admin component on the second import statement.

  RESTClient
  **********
    We're using jsonServerRestClient as our REST client fo now. I plan on building the REST server using Flask, which will basically be the middle-man communicating to the databse.

  The <Admin> component can contain one or more <Resource> comonents, each resource being mapped to an endpoint in the API. To begin with, we'll display the list of posts. Here is what the <PostList> component looks like:

  <Resource> and API
  ******************
  Resource components map to API endpoints.

    // in scr/posts.js
    import React from 'react';
    import {List, Datagrid, TextField } from 'admin-on-rest';

    export const PostList = (props) => (
      <List {...props}>
        <Datagrid>
          <TextField source='id'/>
          <TextField source='title'/>
          <TextField source='body' />
        </Datagrid>
      <List/>
    );

  The main component of the post list is a <List> component, responsible for grabbing the information from the API, displaying the page title, and handling pagination. This list then delegates the display of the actual list of posts to a <Datagrid>, responsible for displaying a table with one row for each post. The datagrid uses its child components (here, a list of <TextField>) to determine the columns to render. to determine the columns to render. Each Field component maps a different field in the API response, specified by the source prop.

  <List>
  ******
    Where is the <List> component getting information from the API? Then, each Field component maps a different field in the API response, specified by the source prop -- maybe the API response is props, which gets injected to the PostList comopnent and passed to the List component. I guess that the <List> component grabbing the information from the API refers to passsing props to the list component.

    That's enough to display the post list. The list is already functional: you can reorder it by clicking on the column headers, or change pages by using the bottom pagination controls.

Field Types
-----------
  You've just met the <TextField> component, but the admin-on-rest provides many Field components to map various content types. For instance, the /users endpoint in JSONPlasceholder contains emails.

    >> curl http://jsonplaceholder.typicode.com/users/2

    {
      "id":2
      ...
    }

  Let's create a new UserList, using <EmailField> to map the email field:

    // in src/users.js
    import React from 'react';
    import { List, Datagrid, EmailField, TextField } from 'admin-on-rest';

    export const UserList = (props) => (
      <List title='All users' {...props}>
        <Datagrid>
          <TextField source='id' />
          <TextField source='name' />
          <TextField source='username' />
          <EmailField source='email' />
        </Datagrid>
      </List>
    );

  You'll notice that this list overrides the default title. To include the new users resource in the admin app, add it in src/App.js


    // in src/App.js
    import { PostList } from './posts';
    import { UserList } from './users';

    const App = () => (
      <Admin restclient={jsonServerRestClient('http://jsonplaceholder.typicode.com')}>
        <Resource name='posts' list={Postlist} />
        <Resource name='users' list={UserList} />
      </Admin>
    );

  The sidebar now gives access to the second resource, Users. The users list shows the email as a <a href='mailto:'> tag.

  In admin-on-rest, fields are simple React components. At runtime, they receive the record fetched from the API on 9e.g. {"id": 2, "name": "Ervin Howell", "username": "Antonette", "email":"asfasfas@", ...}), and the source field they should display (e.g. 'email').

  Fields are React Components
  ***************************
    Fields are simple React components. they receive a record from the API and the source field they should display from this record.

  That means that writing a custom Field component is really simple. For instance, to create a UrlField:

    // in admin-on-rest/src/mui/field/UrlField.js
    import React from 'react';
    import PropTypes from 'prop-types';

    const UrlField = ({ record = {}, source }) =>
      <a href={record[source]}>
        {record[source]}
      </a>;

    UrlField.propTypes = {
      record: PropTypes.object,
      source: PropTypes.string.isRequired,
    };

    export default UrlField;

  Custom Field
  ************
    Have not tried this yet.

Relationships
-------------
  In JSONPlaceholder, each post record includes a userID field, which points to a user:

    {
      "id": 1
      ...
    }

  Admin-on-REST knows how to take advantage of these foreign keys to fetch references. For instance, to include the user name in the posts list, use the <ReferenceField>:

    // in src/posts.js
    import React from 'react';
    import { List, Datagrid, TextField, EmailField, ReferenceField } from 'admin-on-rest';

    export const PostList = (props) => (
      <List {...props}>
        <Datagrid>
          <TextField source ='id' />
          <ReferenceField label='User' source='userID' reference='users'>
            <TextField source='name' />
          </ReferenceField>
          <TextField source='title' />
          <TextField source='body' />
        </Datagrid>
      </List>
    );

  When displaying the posts list, the app now fethes related user records, and displays their name as a <TextField>. Norice the label property: you can use it on any field component to customize the field label.

  Tip: Reference components always pass the data they fetch to a child component, which is responsible for displaying the data.

Creation and Edition
--------------------
  An admin interface is about dispaying remote data, but also about editing and creating. ADmin-on-REST provides <Create> and <Edit> components for that purpose. Add them to the posts script:

    // in src/posts.js
    import React from 'react';
    import { List, Edit, Create, Datagrid, ReferenceField, TextField, EditButton, DisabledInput, LongTextInput, ReferenceInput, SelectInput, SimpleForm, TextInput } from admin-on-rest;

    export const PostList = (props) => (
      <List {...props}>
        <Datagrid>
          <TextField source='id' />
          <ReferenceField label='User' source='userID' reference='users'>
            <TextField source='name' />
          </ReferenceField>
          <TextField source='title' />
          <TextField source='body' />
          <EditButton />
        </Datagrid>
      </List>
    );

    const PostTitle = ({ record }) => {
      return <span>Post {record ? `"${record.title}"` : ''}</span>;
    };

    export const PostEdit = (props) => (
      <Edit title={<PostTitle />} {...props}>
        <SimpleForm>
          <DisabledInput source='id' />
          <ReferenceInput label='User' source='userId' reference='useres'>
            <SelectInput optionText='name' />
          </ReferenceInput>
          <TextInput source='title' />
          <LontTextInput source='body' />
        </SimpleForm>
      </Edit>
    );

    export const PostCreate = (props) => (
      <Create {...props}>
        <SimpleForm>
          <ReferenceInput label='User' source='userId' reference='users' allowEmpty>
            <SelectInput optionText='name' />
          </ReferenceInput>
          <TextInput source='title' />
          <LongTextInput source='body' />
        </SimpleForm>
      </Create>
    );

  Notice the additional <EditButton> field in the <PostList> children: that's what gives access to the post edition page. Also, the <Edit> component uses a custom <PostTitle> component as title, which shows the way to customize the title for a given page. Also, the <Edit> component uses a custom <PostTitle> component as title, which shows the way to customize the title for a given page.

  If you've understood the <List> component, the <Edit> and <Create> components will be no surprise. They are responsible for fetching the record, and displaying the page title. They pass the record down to the <SimpleForm> component, which is responsible for the form layout, default values, and validation. Just like <Datagrid>, <SimpleForm> uses its children to determine the form inputs to display. It expects input components as children. <DisabledInput>, <TextInput>, <LongTextInput>, and <ReferenceInput> are such inputs.

  <SimpleForm> Use children to determine inputs
  **********************************************
    It sounds like SimpleForm uses its children (?) to determine the form inputs to display - this might mean that it looks at the JSON object and displays form components based on the structure of the object.

  As for the <ReferenceInput>, it takes the same props as the <ReferenceField> (used earlier in the list page). <ReferenceInput> uses these props to fetch the API for possible references related to the current record (in this case, possible users for the current post). It then passes these possible references to the child component (<SelectInput>), which is responsible for displaying them (via their name in that case), and letting the user select one. <SelectInput> renders a <select> tag in HTML.

  Tip: The <Edit> and the <Create> components use the same <ReferenceInput> configuration, except for the allowEmpty attribute, which is required in <Create>.

  To use the new <PostEdit> and <PostCreate> components in the posts resource, just add them as edit and create attributes in the <Resource> component:

    // in src/App.js
    import { PostList, PostEdit, PostCreate } from './posts';
    import { UserList } from './users';

    const App = () => (
      <Admin restClient={jsonServerRestClient('http://jsonplaceholder.typicode.com')}>
        <Resource name='posts' list={PostList} edit={PostEdit} create={PostCreate} />
      </Admin>
    )


  Admin-on-rest automatically adds a 'create' button on top of hte posts list to give access to the <PostCreate> component. And the <EditButton> (pencil)renders in each line of the list to give access to the <PostEdit> component.

  The form rendered in the create and edit paves is already functional. It issues POST and PUT requests to the REST API upon submission.

  Note: JSONPlaceholder is a read-only API; although it seems to accept POST and PUT requests, it doesn't take into account the creations and edits - that's why, in this particular case, you will see errors after creation, and you won't see your edits after you save them. It's just an artifact of JSONPlaceholder.

Deletion
--------
  There is not much to configure in a deletion view. To add removal abilities to a Resource, simply use the bundled <Delete> comopnent from admin-on-rest, and register it using the remove prop('delete' is a reserved word in JavaScript):

    // in src/App.js
    import { Delete } from 'admin-on-rest';

    const App = () => (
      <Admin restClient={jsonServerRestClient('http://jsonplaceholder.typicode.com')}>
        <Resource name='posts' list={PostList} edit={PostEdit} create={PostCreate} remove={Delete} />
        // ...
      </Admin>
    );

  In the edition view, a new 'delete' button appears. And you can also use the <DeleteButton> as a field in the list.

Filters
-------
  Let's get back to the post list for a minute. It offers sorting and pagination, but one feature is missing: the ability to search content.

  Admin-on-rest can use input components to create a multi-criteria search engine in the list view. First, create a <Filter> component just like you would write a <SimpleForm> component, using input components as children. Then, add it to the list using the filters prop:

    // in src/posts.js
    import { Filter, ReferenceInput, SelectInput, TextInput } from 'admin-on-rest';

    const PostFilter = (props) => (
      <Filter {...props}>
        <TextInpyt label-'Search' source='q' alwaysOn />
        <ReferenceInput label='User' source='userId' reference='users' allowEmpty>
          <SelectInput optionText='name' />
        </ReferenceInput>
      </Filter>
    );

    export const PostList = (props) => (
      <List {...props} filters={<PostFilter />}>
        // ...
      </List>
    );

  The first filter, 'q', takes advantage of a full-text functionality offered by JSONPlaceholder. It is alwaysOn, so it appears on the screen. The seocnd filter, 'userID', can be added by way of the 'add filter' button, located on the top of the list. As it's a <ReferenceInput>, it's already populated with possible users. It can be turned off by the end user.

  Filters are 'search-as-you-type', meaning that when a user enters new values in the filter form, the list refreshes (via an API request) immediately.


Customize the Menu Icons
------------------------
  ...

Using a custom Home Page
------------------------
  ...

Adding a Login Page
-------------------
  Most admin apps require authentication. Admin-on-request can check user credentials before displaying a page, and redirect to a login form when the REST API returns a 403 error code.

  What those credentials are, and how to get them, are questions that you must answer. Admin-on-rest makes no assumption about your authentication strategy (basic auth, OAuth, custom route, etc), but gives you the hooks to plug your logic at the right place - by calling an authClient function.

  For this tutorial, since there is no public authentication API we can use, let's use a fake authentication provider tha accepts every login request, and stores the username in localStorage. Each page chagnes will require that localStorage contains a username item.

  The authClient is a simple function, which must return a Promist:

    // in src/authClient.js
    import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'admin-on-rest';

    export default (type, params) => {
      // called when the user attempts to log in
      if (type === AUTH_LOGIN) {
        const { username } = params;
        localStorage.setItem('username', username);
        // accept all username/password combinations
        return Promise.resolve();
      }
      // called when the user clicks on the logout button
      if (type === AUTH_LOGOUT){
        localStorage.removeItem('username');
        return Promise.resolve();
      }
      // called when the API returns an error
      if (type === AUTH_ERROR) {
        const (status === 401 || status === 403){
          localStorage.removeItem('username');
          return Promise.reject();
        }
      }
      // called when the user navigates to a new location
      if (type === AUTH_CHECK){
        return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();
      }
      return Promise.reject('Unknown method');
    };

  Tip: As the restClient response is asynchronous, you can easily fetch an authentication server there.

  To enable this authentication strategy, pass the client as the authClient prop in the <Admin> component.

    // ins src/App.js
    import Dashboard from './Dashboard';
    import authClient from './authClient';

    const App = () => (
      <Admin authClient={authClient} restClient={jsonServerRestClient('http://jsonplaceholder.typicode.com')}>
        // ...
      </Admin>
    );

  Once the app reloads, it's now behind a login form that accepts everyone:

Responsive List
---------------
  ...

Using Another REST Dialect
--------------------------
  Here is the elephant in the room of this tutorial. In real world projects, the REST dialect of your API won't match the JSONPlaceholder dialect. Writing a REST client is probably the first thing you'll have to do to make admin-on-rest work. Depending on your API, this can require a few hours of additional work.

  Admin-on-rest delegates every REST calls to a REST client function. This function must simply return a promist for this result. This gives extreme freedom to map any API dialect, add authentication headers, use endpoints from several domains, etc.

  For instance, let's imagine you have to use the my.api.url API, which expects the following parameters:

    Action: Expected REST request
    Get list: GET http://my.api.url/posts?sort=['title']

    Get one record: GET http://my.api.url/posts/123

    Get several records: GET http://my.api.url/posts?filter={ids:[123,456]}

    Update a record: PUT http://my.api.url/posts/123

    Create a record: POST http://my.api.url/posts/123

    Delete a record: DELETE http://my.api.url/posts/123

  Admin-on-rest defines custom verbs for each of the actions of this list. Justlike HTTP verbs (GET, POST, etc), rest verbs qualify a request to a REST server. Admin-on-rest verbs are called GET_LIST, GET_ONT, GET_MANY, CREATE, UPDATE, and DELETE. The REST client will have to map each of these verbs to one (or many) HTTP request(s).

  The code for an API client for my.api.url is as follows:

    ... lots of code ...

  Using this client instead of the previous jsonServerRestClient is just a matter of switching a function:

    // in src/app.js
    import myApiRestClient from './restClient';

    const App = () => (
      <Admin restClient={myApiRestClient} dashboard={Dashboard}>
        // ...
      </Admin>
    );

Conclusion
----------
  Admin-on-rest was built with customization in mind. You can replace any admin-on-rest component with a component of your own, for instance to display a custom list layout, or a different edition form for a gnven resource.

  Now that you've completed this tutorial, continue reading the admin-on-rest documentation, and read the Material UI components documentation.